import PlayFabErrors
import PlayFabHTTP
import json
import PlayFabSettings

<%- generateApiSummary("", api, "description")%>
<% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- generateApiSummary("", apiCall, "summary")
%><%- getDeprecationAttribute("", apiCall)
%>def <%- apiCall.name %>(request, customData, extraHeaders, postProcessingFunc):
<%- getRequestActions("    ", apiCall) %>
    httpResult = PlayFabHTTP.DoPost("<%- apiCall.url %>", request, <%- getAuthParams(apiCall) %>, extraHeaders)
    if type(httpResult) is PlayFabErrors.PlayFabError:
        error = httpResult
        postProcessingFunc(None, error)
        return error

    resultRawJson = httpResult.text
    resultData = json.loads(resultRawJson)
    result = resultData
    returnResult = resultData["data"]
<%- getResultActions("    ", apiCall, api) %>
    postProcessingFunc(returnResult, None)

<% } %><% if (hasClientOptions) {
%># Determine if the client session ticket is set, without actually making it public
def IsClientLoggedIn():
    return not (ClientSessionTicket == "" or ClientSessionTicket == None)

def MultiStepClientLogin(needsAttribution):
    if needsAttribution and not PlayFabSettings.DisableAdvertising and not PlayFabSettings.AdvertisingIdType and not PlayFabSettings.AdvertisingIdValue:
        request = {}
        if AdvertisingIdType == AD_TYPE_IDFA:
            request["Idfa"] = AdvertisingIdValue
        elif AdvertisingIdType == AD_TYPE_ANDROID_ID:
            request["Adid"] = PlayFabSettings.AdvertisingIdValue
<% } %>
