import PlayFabHTTP
import PlayFabSettings
import PlayFabErrors
import json

def noneOrEmpty(str):
    return str == "" or str == None

<%- generateApiSummary("", api, "description")%><% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- generateApiSummary("", apiCall, "summary")
%><%- getDeprecationAttribute("", apiCall)
%>def <%- apiCall.name %>Async(request, customData, extraHeaders, postProcessingFunc):
<%- getRequestActions("    ", apiCall) %>
    httpResult = PlayFabHTTP.DoPost("<%- apiCall.url %>", request, <%- getAuthParams(apiCall) %>, extraHeaders)
    if type(httpResult) is PlayFabErrors.PlayFabError:
        error = httpResult
        postProcessingFunc(error)
        return error

    resultRawJson = httpResult.text
    resultData = json.loads(resultRawJson)
    result = resultData
    returnResult = resultData["data"]
<%- getResultActions("    ", apiCall, api) %>
    postProcessingFunc(returnResult)
    return returnResult

<% } %><% if (authKey) {
%># Determine if the client session ticket is set, without actually making it public
def IsClientLoggedIn():
    return not (ClientSessionTicket == "" or ClientSessionTicket == None)

def MultiStepClientLogin(needsAttribution):
    if needsAttribution and not PlayFabSettings.DisableAdvertising and not noneOrEmpty(PlayFabSettings.AdvertisingIdType) and not noneOrEmpty(PlayFabSettings.AdvertisingIdValue):
        request = AttributeInstallRequest()
        if AdvertisingIdType == AD_TYPE_IDFA:
            request.Idfa = AdvertisingIdValue
        elif AdvertisingIdType == AD_TYPE_ANDROID_ID:
            request.Adid = PlayFabSettings.AdvertisingIdValue
        else:
            return None
        return AttributeInstallAsync(request)
    return None
<% } %>
