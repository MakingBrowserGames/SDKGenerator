import PlayFabErrors
import PlayFabHTTP
import json
import PlayFabSettings

<%- generateApiSummary("", api, "description")%>
<% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- generateApiSummary("", apiCall, "summary")
%><%- getDeprecationAttribute("", apiCall)
%>def <%- apiCall.name %>(request, callback, customData = None, extraHeaders = None):
<%- getRequestActions("    ", apiCall) %>
    playFabResult = PlayFabHTTP.DoPost("<%- apiCall.url %>", request, <%- getAuthParams(apiCall) %>, extraHeaders, callback)
<%- getResultActions("    ", apiCall, api) %>
    try:
        callback(playFabResult, None)
    except:
        raise PlayFabErrors.PlayFabException("Callback function {} for <%- apiCall.name %> failed".format(callback.__name__))

<% } %><% if (hasClientOptions) {
%># Determine if the client session ticket is set, without actually making it public
def IsClientLoggedIn():
    return bool(PlayFabSettings.ClientSessionTicket)

def MultiStepClientLogin(settingsForUser):
    disabledAds = PlayFabSettings.DisableAdvertising
    adIdType = PlayFabSettings.AdvertisingIdType
    adIdVal = PlayFabSettings.AdvertisingIdValue

    if settingsForUser["NeedsAttribution"] and not disabledAds and adIdType and adIdVal:
        request = {}
        if AdvertisingIdType == AD_TYPE_IDFA:
            request["Idfa"] = AdvertisingIdValue
        elif AdvertisingIdType == AD_TYPE_ANDROID_ID:
            request["Adid"] = PlayFabSettings.AdvertisingIdValue
<% } %>
